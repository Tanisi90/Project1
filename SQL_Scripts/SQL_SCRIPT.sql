-- Drop table

--DROP TABLE ERS_REIMBURSEMENT CASCADE;

CREATE TABLE ERS_REIMBURSEMENT (
	REIMB_ID SERIAL NOT NULL,
	REIMB_AMOUNT NUMERIC NOT NULL,
	REIMB_SUBMITTED TIMESTAMP NOT NULL,
	REIMB_RESOLVED TIMESTAMP,
	REIMB_DESCRIPTION VARCHAR(250),
	REIMB_RECEIPT BYTEA,
	REIMB_AUTHOR INTEGER REFERENCES ERS_USERS(ERS_USERS_ID) NOT NULL,
	REIMB_RESOLVER INTEGER REFERENCES ERS_USERS(ERS_USERS_ID),
	REIMB_STATUS_ID SERIAL REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID) NOT NULL,
	REIMB_TYPE_ID SERIAL REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID) NOT NULL,
	CONSTRAINT ERS_REIMBURSEMENT_PKEY PRIMARY KEY (REIMB_ID)
);

--DROP TABLE ERS_REIMBURSEMENT_STATUS CASCADE;

CREATE TABLE ERS_REIMBURSEMENT_STATUS (
	REIMB_STATUS_ID SERIAL NOT NULL,
	REIMB_STATUS VARCHAR(10) NOT NULL,
	CONSTRAINT ERS_REIMBURSMENT_STATUS_PKEY PRIMARY KEY (REIMB_STATUS_ID)
);

--DROP TABLE ERS_REIMBURSEMENT_TYPE CASCADE;

CREATE TABLE ERS_REIMBURSEMENT_TYPE (
	REIMB_TYPE_ID SERIAL NOT NULL,
	REIMB_TYPE VARCHAR(10) NOT NULL,
	CONSTRAINT ERS_REIMBURSEMENT_TYPE_PKEY PRIMARY KEY (REIMB_TYPE_ID)
);

--DROP TABLE ERS_USER_ROLES CASCADE;

CREATE TABLE ERS_USER_ROLES (
	ERS_USER_ROLE_ID SERIAL NOT NULL,
	USER_ROLE VARCHAR(10) NOT NULL,
	CONSTRAINT ERS_USER_ROLES_PKEY PRIMARY KEY (ERS_USER_ROLE_ID)
);

--DROP TABLE ERS_USERS CASCADE;

CREATE TABLE ERS_USERS (
	ERS_USERS_ID SERIAL NOT NULL,
	ERS_USERNAME VARCHAR(50) NOT NULL,
	ERS_PASSWORD VARCHAR(50) NOT NULL,
	USER_FIRST_NAME VARCHAR(100) NOT NULL,
	USER_LAST_NAME VARCHAR(100) NOT NULL,
	USER_EMAIL VARCHAR(150) NOT NULL,
	USER_ROLE_ID SERIAL REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID) NOT NULL,
	UNIQUE (ERS_USERNAME, USER_EMAIL),
	CONSTRAINT ERS_USERS_PKEY PRIMARY KEY (ERS_USERS_ID)
);

INSERT INTO ERS_USER_ROLES (USER_ROLE) 
	VALUES ('Employee');
INSERT INTO ERS_USER_ROLES (USER_ROLE) 
	VALUES ('F Manager');


INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE)
	VALUES ('Travel Exp'),
		   ('Dining'),
		   ('Lodging'),
		   ('Internet'),
		   ('Certs'),
		   ('Other');

INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS)
	VALUES ('Pending'),
		   ('Approved'),
		   ('Denied');
		  
			 
--Trigger Function for ticket creation
CREATE OR REPLACE FUNCTION trigger_set_time_1() RETURNS TRIGGER 
AS $$
BEGIN 
	NEW.reimb_submitted = NOW();
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

I--Trigger Function for Updateing once ticket resolved
CREATE OR REPLACE FUNCTION trigger_set_time_2() RETURNS TRIGGER 
AS $$
BEGIN 
	NEW.reimb_resolved = NOW();
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_time1 BEFORE INSERT ON ers_reimbursement FOR EACH ROW 
EXECUTE PROCEDURE trigger_set_time_1();

CREATE TRIGGER set_time2 BEFORE UPDATE ON ers_reimbursement FOR EACH ROW 
EXECUTE PROCEDURE trigger_set_time_2();

-- Insert Dummy Data


